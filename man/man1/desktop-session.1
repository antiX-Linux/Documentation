.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DESKTOP-SESSION 1"
.TH DESKTOP-SESSION 1 "2014-11-13" "Version 2.0.0" "antiX Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
desktop\-session Session manager / loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This program is an intermidiate set of scripts to loading the session.
It is similar in principle to a glorified ~/.xinitrc. The job of
desktop-session is to take input from the login manager, and output
a set of programs / functions in order to load a \*(L"session\*(R".
.SH "How to Use"
.IX Header "How to Use"
Desktop-session is enabled by default to handle login signals from slim.
Choosing Rox-xxxx or Space-xxxx will be forwarded by slim to 
desktop-session were it is then determined that you would like to load
xxxx as the window manager and Rox or Space as the Icon manager. From
here it uses options set in /etc/desktop\-session/desktop\-session.conf 
(\s-1OR\s0 ~/.desktop\-session/desktop\-session.conf) to start more items that 
you would like to see in the session. (Conky for example) There are
several options that are handled by default (with Full), however it
is not limited to these options.
.IP "\fBrox-fluxbox\fR" 4
.IX Item "rox-fluxbox"
fluxbox window manager with rox pinboard and other startup apps
.IP "\fBspace-fluxbox\fR" 4
.IX Item "space-fluxbox"
fluxbox window manager with spacefm desktop and other startup apps
.IP "\fBmin-fluxbox\fR" 4
.IX Item "min-fluxbox"
fluxbox only, minimal ram as nothing else is started!
.IP "\fBfluxbox\fR" 4
.IX Item "fluxbox"
fluxbox only, with other startup applications.
.IP "\fBrox-icewm\fR" 4
.IX Item "rox-icewm"
icewm window manager with rox pinboard and other startup apps
.IP "\fBspace-icewm\fR" 4
.IX Item "space-icewm"
icewm window manager with spacefm desktop and other startup apps
.IP "\fBmin-icewm\fR" 4
.IX Item "min-icewm"
icewm only, minimal ram as nothing else is started!
.IP "\fBicewm\fR" 4
.IX Item "icewm"
icewm only, with other startup applications.
.IP "\fBrox-jwm\fR" 4
.IX Item "rox-jwm"
jwm window manager with rox pinboard and other startup apps
.IP "\fBspace-jwm\fR" 4
.IX Item "space-jwm"
jwm window manager with spacefm desktop and other startup apps
.IP "\fBmin-jwm\fR" 4
.IX Item "min-jwm"
jwm only, minimal ram as nothing else is started!
.IP "\fBjwm\fR" 4
.IX Item "jwm"
jwm only, with other startup applications.
.PP
If you wish to start a session from another login manager (or from the \s-1CLI\s0 via startx)
you will need to specify desktop-session as the session handling script.
.PP
For example with startx.
.PP
log in as user into the console.
.PP
type: startx /usr/local/bin/desktop\-session DESKTOP-CODE
.PP
Where DESKTOP-CODE is replaced with any of the codes from the above list.
.SH "Configuration"
.IX Header "Configuration"
Configuration is handled in /etc/desktop\-session/desktop\-session.conf.
This is the global configuration file, so be careful! Any changes made 
in this file will affect all users \fBUnless\fR the user has a user based
desktop\-session.conf file (~/.desktop\-session/desktop\-session.conf). In
This case all options specified in the user file will override what is 
in the global configuration file.
.PP
\fIConfiguration Options\fR
.IX Subsection "Configuration Options"
.ie n .IP "STARTUP_DELAY=""X""" 4
.el .IP "STARTUP_DELAY=``X''" 4
.IX Item "STARTUP_DELAY=X"
Session service delay.
.Sp
This is to set how long to delay startup to give enough time for the wm to completely load,
before starting to load other applications. This wait period will be started after the 
window manager has been found running ( has a pid ).
\&\s-1TIME\s0 is expressed in seconds
.Sp
Options: 0\-9...
.Sp
.Vb 1
\& STARTUP_DELAY="1"
.Ve
.Sp
will delay for 1 second.
.Sp
.Vb 1
\& STARTUP_DELAY="10"
.Ve
.Sp
will delay for 10 seconds.
.Sp
This is useful for systems that are not quite fast enough and 
applications (such as the icon managers) start before the window manager
finishes loading and therfor end up looking like they are not running.
.ie n .IP "TIMES_TO_CHECK=""X""" 4
.el .IP "TIMES_TO_CHECK=``X''" 4
.IX Item "TIMES_TO_CHECK=X"
Session window manager check
.Sp
This is to set the amount of times desktop-session checks for a running window manager
before giving up and denying the session to load.
.Sp
Options: 0\-9...
.Sp
Example:
.Sp
.Vb 1
\& TIMES_TO_CHECK="20"
.Ve
.ie n .IP "FORCE_LOAD=""X""" 4
.el .IP "FORCE_LOAD=``X''" 4
.IX Item "FORCE_LOAD=X"
Session give up override
.Sp
This is to set the override if the window manager is never found to be running by 
desktop-session after X number of times (Specified above). This will force the 
session to load if set to true.
.Sp
Options: true | false
.Sp
Example:
.Sp
.Vb 1
\& FORCE_LOAD="true"
.Ve
.ie n .IP "SESSION_PROTECT=""X""" 4
.el .IP "SESSION_PROTECT=``X''" 4
.IX Item "SESSION_PROTECT=X"
Session Protect.
This is how to protect the user from automatic updating of any file within desktop-session.
Examples of automatically updated files are the menu, any file compare within file_compare, etc.
.Sp
Options for this are:
.RS 4
.IP "true" 4
.IX Item "true"
Strictly protect the user, leave the user to deal with any of the updating
.IP "ask" 4
.IX Item "ask"
Notify me at startup of any changes and allow me to choose what to update
.IP "false" 4
.IX Item "false"
Just update me, I dont want to worry about falling behind.
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\& SESSION_PROTECT="ask"
.Ve
.RE
.ie n .IP "NOTIFICATION_TEXT=""X""" 4
.el .IP "NOTIFICATION_TEXT=``X''" 4
.IX Item "NOTIFICATION_TEXT=X"
Notification text or program
.Sp
This is where the text is set for the notification that the session is loading.
This can be a specified text string or a program that will return a text string
.Sp
Options:
.RS 4
.IP "Session is Loading, Please Wait....." 4
.IX Item "Session is Loading, Please Wait....."
Specific Text Option. Single line.
.IP "/usr/games/fortune" 4
.IX Item "/usr/games/fortune"
Program to return text
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\& NOTIFICATION_TEXT="Session is Loading, Please Wait....."
\& 
\& NOTIFICATION_TEXT="/usr/games/fortune"
.Ve
.RE
.ie n .IP "STARTUP_DIALOG=""X""" 4
.el .IP "STARTUP_DIALOG=``X''" 4
.IX Item "STARTUP_DIALOG=X"
Startup Dialog Enable
.Sp
This is where to enable or disable the startup dialog.
When Enabled it will run only once per login, not on restarts or desktop switching.
.Sp
Options: true | false
.Sp
Example:
.Sp
.Vb 1
\& STARTUP_DIALOG="true"
.Ve
.ie n .IP "STARTUP_DIALOG_CMD=""X""" 4
.el .IP "STARTUP_DIALOG_CMD=``X''" 4
.IX Item "STARTUP_DIALOG_CMD=X"
Startup Dialog Command.
.Sp
This is where to setup what you would like to run for a startup dialog.
.Sp
Example:
.Sp
.Vb 1
\& STARTUP_DIALOG_CMD="yad \-\-image=\*(Aqinfo\*(Aq \-\-text=\*(Aqthis is my startup dialog\*(Aq"
\& 
\& STARTUP_DIALOG_CMD="leafpad ~/.startup\-text
\& 
\& STARTUP_DIALOG_CMD="/usr/local/lib/desktop\-session/startup\-dialog.py"
.Ve
.ie n .IP "LOAD_CONKY=""X""" 4
.el .IP "LOAD_CONKY=``X''" 4
.IX Item "LOAD_CONKY=X"
Session Load Conky
.Sp
This is where you set if you would like to load conky or not.
Loading conky here as apposed to a startup file allows us to incorporate
conky into you sessions by loading session specific conkyrcs'
.Sp
If you wish to load a specific conkyrc for a specific window manager, take 
the name of the window manager, copy your conkyrc to ~/.conky and name /
rename that conkyrc to WindowManager-conkyrc. If you do not want a session 
specific conky simply remove all formatted options (rename *.bk) and 
desktop-session will load the default ~/.conkyrc
.Sp
Options: true | false
.Sp
Example:
.Sp
.Vb 1
\& LOAD_CONKY="true"
.Ve
.Sp
In desktop\-session.conf to load conky in general (~/.conkyrc). And 
copy / make....
.Sp
.Vb 1
\& ~/.conky/icewm\-conkyrc
.Ve
.Sp
To load that conkyrc upon loggin into an icewm based session.
.ie n .IP "LOAD_XDG_AUTOSTART=""X""" 4
.el .IP "LOAD_XDG_AUTOSTART=``X''" 4
.IX Item "LOAD_XDG_AUTOSTART=X"
Session Load \s-1XDG\s0 Autostart enabled items
.Sp
This will load any application that is setup to autostart via xdg autostart directories /
\&.desktop files.
.Sp
Options: true | false
.Sp
Example:
.Sp
.Vb 1
\& LOAD_XDG_AUTOSTART="true"
.Ve
.ie n .IP "LOAD_STARTUP_FILE=""X""" 4
.el .IP "LOAD_STARTUP_FILE=``X''" 4
.IX Item "LOAD_STARTUP_FILE=X"
Session Load Desktop-session startup
.Sp
This will enable the global /etc/desktop\-session/startup file 
(or ~/.desktop\-session/startup if existing) if enabled. The 
startup file is in bash script format, so however you would like to 
run / enable something it is only restrained by what bash can do.
.Sp
Options: true | false
.Sp
Example:
LOAD_STARTUP_FILE=\*(L"true\*(R"
.ie n .IP "SCREEN_BLANK_TIME=""X""" 4
.el .IP "SCREEN_BLANK_TIME=``X''" 4
.IX Item "SCREEN_BLANK_TIME=X"
Screen Blank Time
.Sp
This is where you set the time value that it takes for your screen to 
\&\*(L"blank\*(R" (turn off / go blank). The time value is in secconds.
Please note you can edit this manually, as well as via the set-screen-blank
app (if installed)
.Sp
Options: [0\-9]....
.Sp
Example:
.Sp
.Vb 1
\& SCREEN_BLANK_TIME="600"
.Ve
.Sp
For 10 minutes
.Sp
.Vb 1
\& SCREEN_BLANK_TIME="3600"
.Ve
.Sp
For 1 hour
.SH "LICENSE"
.IX Header "LICENSE"
All code is licensed under the 
GPL\-v3 <https://www.gnu.org/copyleft/gpl.html> or later.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1014
BitJam for antiX <http://antix.freeforums.org/>
