=encoding utf8

=head1 NAME

make-fstab - Create and update dynamic fstab entries

=head1 SYNOPSIS

Add entries to and remove entries from the F<fstab> file.  Designed
to work in a LiveCD/USB environment where the hardware can be
different on every boot yet still respect any entries that were
manually added to F<fstab>.

In B<L<create mode|/Create Mode>>, create a F</etc/fstab> file from scratch or
supplement an existing fstab, creating entries for hard drives and cdrom, dvd,
and floppy devices while  preserve existing entries, if any.  For each entry
added, create a mountpoint under F</media> and optionally mount either all hard
drive partitions or just usb drive partitions, or none at all.

In B<L<update mode|/Update Mode>>, add or remove one entry (and a F</media >
mountpoint) based on L<environment variables|/Environment> that are typically
passed to a udev rule.  Also optionally mount hard drive partitions that are
added.

=head1 OPTIONS

=over 8

=item -c --create

Force B<L<create mode|/Create Mode>> regardless of environment variables.

=item --delete

Delete all of our entries from F<fstab>.  Only works in B<create mode>.

=item -d --dirs=[nolabel|uuid|encode]

Comma separated list of directives that control how we name mountpoints
directories under the F</media> directory.   The full list of valid
directives is:

 uuid, nouuid, label, nolabel, encode, noencode


=item -D --debug

Add full environment information in the log file in B<update mode>.

=item -f --fstab=<file>

Use <file> as the fstab file.  Default is /etc/fstab for root user and
./fstab for non-root users.

=item -h --help

Show simple usage.

=item -l --log-file=<file>

Use <file> as the log file.  The default is make-fstab.log.

=item -m --mount=[usb|all]

Mount these devices when building fstab in B<create mode>.  Perhaps it
would be better to name this C<--automount> but we use this name for
backward compatibility. ??

=item -M --mntpnt=<dir>

The directory under which we create mountpoints.  For root user the
default is F</media> for non-root users the default is F<./media>.
=item -n --no-log

Disable logging.

=item -N --no-uuid

Normally entries in the C<fstab> file are identified with a UUID instead
of the device name.   If this is set then device names are used instead.
For example, an entry starting with something like:

 UUID=12345678-abcd-1234-abcd-123456789012

would instead start with just the name of the device:

 /dev/sda1

I<Note:> The udev rule will need to be modified in order to have this
apply in B<update mode>.  This is I<not> the same as the C<--dirs=nouuid>
directive.  If UUIDS are not available then we automatically fall back
to using device names in F<fstab> entries.

=item -q --quiet

Only print errors and warnings.  Normally a short summary of what is
happening in B<create mode> is printed out.

=item -s --swap-only

Only add swap partitions to fstab in B<create mode>.

=item -u --update

Force B<L<update mode|/Update Mode>> regardless of environment variables.

=item -v --verbose

Print more information to the screen in both B<create> and B<update>
modes.

=back

=head1 DESCRIPTION

The F<make-fstab> program is designed to create and update an F<fstab>
file on a LiveCD/USB system.  On such a system, unless some service
takes responsibility for mounting block devices, an fstab file must be
created anew each time the system boots.  Even on such a system is it
unconventional to dynamically update fstab when devices get plugged and
unplugged but we have found this is very convenient for the users,
especially on command-line only systems.

Since we need to create an fstab file at boot time anyway, it was not a
big stretch to add full dynamic updating.

One of the key features is that any manually created fstab entries take
precedence over entries that are generated automatically.  In the
extreme case where all devices are already in the F<fstab> then
F<make-fstab> won't do do anything.

=head2 Create Mode

We begin by removing all fstab entries that were created by this program.
All such entries are preceded by a I<marker> comment line like:

 # created by make-fstab /dev/sda1

If there are no remaining entries then we erase fstab and replace
it with header comments designed to work with entries generated by
this program.

=head3 Hard Drive Devices

We start populating fstab by appending entries preceding each entry line
with a marker line as described above.  We start by using the F<blkid>
program to get a list of all block devices with file systems.  We filter
the list to only include devices with major device number 8 or 3 (hard
drives, as opposed to, say, cdrom drives).  For each device we first
check to see if it is already mounted or was already in fstab as a
manual entry.

If C<--swap> was given then we only add entries for swap devices
and ignore all others.

=head3 CD-ROM Devices

Next, if there is no C<--swap> then we include entries for the
following devices, if they exist:

=over

=item /dev/cdrom* 

=item /dev/cdrw*

=item /dev/dvd*

=item /dev/fd[0-9]*

=item /dev/floppy*

=item /dev/scd[0-9]*

=item /dev/sr[0-9]*

=back

This may not be as robust as using the major device number for hard
drives but there is ad hocery involved in processing these names anyway.
A subroutine exists to generate this list of devices somewhat more correctly.

=head2 Update Mode

In B<update mode>, act as a udev-helper using L<environment
variables|/Environment> to determine what to do.  Usually either add
or remove an fstab entry based on the value of the B<ACTION> variable.
Since it is convenient to use fixed command line parameters inside a
udev rule, the behavior in B<update mode> can be controlled by L<two
files|/Files>, F</etc/fstab.hotplug> and F</etc/fstab.automount>.

=head2 Mountpoint Creation

The names of the F</media> mountpoint directories are controlled by
directives given in the C<--dirs> command line parameter in both
B<create> and B<update mode>s.  It can be further modified by the
contents of the F<fstab.hotplug> file in B<udpdate mode> only.  The
following directives are valid: C<label nolabel uuid nouuid encode
noencode>.  Directives should be separated by commas. The current
default is C<label,nouuid,noencode>.

Changes accumulate so if you have C<--dirs=uuid> in the udev
rules file and the F<fstab.hotplug> file contains C<nolabel>, the
final result would be C<nolabel,uuid,noencode>.

=over

=item label, nolabel

If this is set then use the partition label as the mountpoint if it
exists.  Otherwise fallback to using the UUID or the device name.

=item uuid, nouuid

If this is set then use the UUID of the device as the mountpoint if no
label exists or if labels are not enabled.  Otherwise fallback to using
the device name (B<sda1>, and so on).

=item encode, noencode

If this is set then mountpoint names based on labels or UUIDs will
mimic the symlinks under F</dev/disk/by-label> and F</dev/disk/by-uuid>.
The encoding coverts special characters to their hex values.  Examples
of encoding:

 newline --> \x0a
 space   --> \x20
 slash   --> \x2f

If this is not set then sequences of one or more special characters are
converted to a single underscore.  There are no special characters in
valid UUIDs.


=back

=head3 Name Collisions

It is very easy for more than one partition to have the same label.
In rarer cases it is possible for there to be collisions in UUIDs
and (very rarely) device names.  If a collision is detected then
a hyphen and a digit are appended to avoid the collision.  Examples:

=over 8

=item F<boot>

=item F<boot-2>

=item F<boot-3>

=back

The digits can range from 2 through 9.  B<I<FIXME>>: should we use 02
-- 99 instead?

=head1 ENVIRONMENT

In B<update mode> we act as a udev-helper using the environment
variables:

=over

=item    ACTION

=item    DEVNAME

=item    ID_FS_LABEL

=item    ID_FS_LABEL_ENC

=item    ID_FS_TYPE

=item    ID_FS_UUID

=item    ID_FS_UUID_ENC

=back

In addition, if neither C<--create> nor C<--update> is specified then
we will fall back to using environment variables to determine the mode
to use.  If both B<ACTION> and B<DEVNAME> are defined then we will use
B<update mode>, otherwise we will use B<create mode>.

=head1 FILES

It is easy to control the operation of the program in B<create mode> by
supplying command line parameters.  But if B<update mode> is called from a
udev rule then it is not always convenient to have to rewrite the rule
to add command line parameters in order to change the behavior.  So
there are two control files that are used to control the operation when
in B<update mode>.

=over

=item /etc/fstab.hotplug

The existence of this file turns fstab hotplugging on and off.  If the
file does not exist then we do not do nothing when in B<update mode>.
The fstab file is not re-written, mountpoint directories are not created
or deleted, and devices are not mounted.

If the file exists then fstab hotplugging is enabled.  When a device is
plugged in and we are called via the udev rule then we will create a new
entry for the device in fstab and create a mountpoint directory for it.
Similarly, we will remove the entry for a device and remove its
mountpoint directory when it is unplugged.

The contents of this file can contain the same information as the
C<--dirs> command line parameter.  It controls how we name the
mountpoint directories under F</media>.  This file is read I<after> the
command line parameter is read so you could use C<--dirs> in the udev
rule to alter the defaults and then have those new defaults over-ridden
by the contents of the F<fstab.hotplug> file.  If hotplugging is
disabled then no automounting will occur  because no new entries are
being added to fstab.

=item /etc/fstab.automount

The F</etc/fstab.automount> control file is used in B<update mode>.  If
this file exists then we automatically mount a device whenever we create
a new entry for it and the mountpoint is under the F</media> directory.

In B<create mode> this same functionality is provided by the C<--mount>
parameter which can be set to B<all> or B<usb>.  There is no equivalent
to usb-only in B<update mode> since it is assumed that if automounting
is enabled then any new disk drive that shows up should be automounted.

=back

=head1 DEBUGGING

It can be tricky and dangerous to debug a script that overwrites your
F<fstab> file.  Most of this script can be debugged when it is run as a
non-root user.  In that case, all input and output files are read and
created in the current working directory.  Mountpoints are created in
the F<./media/> directory.  In addition, when run as non-root user, the
F<blkid> command is run with F<sudo> to mimic how that program responds
when it is run by root.  But F<sudo> is not used for writing any files
or doing anything to the system, only to gather information so you
should not be alarmed when it asks for your password.

In addition, the C<--debug> option causes then entire environment to be
sent to the log file when in B<update mode>.  This makes it easy to
verify exactly what inputs the program is getting when it is called as a
udev-helper.


=head1 CAVEATS

We do not handle manual entries that start with C<LABEL=xxx> perfectly.
We will not remove them but it is possible that will add an entry that
refers to the same device.  Since labels are generally non-unique, it
is not a good idea to use them to identify devices inside your fstab.

There are no special characters in valid UUIDs so the encoded and
non-encoded version of UUIDS should be identical.  If they are not
indentical then using C<UUID=xxx> in fstab entries will fail.  If there
is a mismatch then we fall back to using the device name to identify the
device in the first field of F<fstab>.

=head1 COPYRIGHT

Copyright 2012 -- 1014
BitJam for antiX L<http://antix.freeforums.org/>
